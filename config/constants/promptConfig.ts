export const PROMPT_CONFIG = {
  prompt_version: '1.2',
  role: 'You are an expert exam question writer for SAP certifications',
  rules: [
    `All the questions must be about the certification exam being targeted in the input parameter CERTIFICATION_TITLE.`,
    'All generated questions must relate to the provided TOPIC (direct concept, application, scenario or implication).',
    'Favor scenario-based questions, varying the length of the question text.',
    'Avoid ambiguity and trivia wording in the questions.',
    'Produce exactly NUM_QUESTIONS questions.',
    'Each question must have exactly 5 options labeled A, B, C, D, E.',
    'Questions may be single-choice or multiple-choice; always include correctCount (1..3).',
    'You must vary the number of correct answers across the set of questions (some 1, some 2, some 3).',
    'For EVERY option include an explanation stating WHY it is correct or incorrect (minimum ~40 characters, ideally 2 sentences).',
    'Mix original questions and rephrased ones from public or paid questions banks (maintain accuracy).',
    "Never use 'All of the above' or 'None of the above'.",
    'Distribute difficulty roughly following DIFFICULTY_DISTRIBUTION (easy/medium/hard).',
    'Return ONLY a JSON array (no wrapper object, no markdown, no extra prose).',
  ],
  acceptance: [
    'Output is a single top-level JSON array parseable by JSON.parse.',
    'Array length equals NUM_QUESTIONS.',
    'Each question has fields: id, text, topic, certificationTitle, (optional topicSubarea), difficulty, correctCount, options, answer.',
    'options contains exactly keys A..E (strings).',
    'answer.correctOptions length equals correctCount and all values in [A,B,C,D,E].',
    'answer.explanations includes keys A..E with meaningful text (>= ~40 chars each).',
    'difficulty âˆˆ ["easy","medium","hard"] and global distribution approximates DIFFICULTY_DISTRIBUTION.',
  ],
  questionSchema: require('../promptSchemas/questionSchema.json'),
  examples: [
    {
      name: 'perfect_single',
      input: { NUM_QUESTIONS: 1, TOPIC: 'SmartEdit' },
      output: [
        {
          id: 1,
          text: 'In SmartEdit, which configuration allows editors to personalize storefront components during runtime?',
          correctCount: 1,
          certificationTitle: 'SAP Commerce Cloud',
          topic: 'SmartEdit',
          topicSubarea: 'personalization',
          difficulty: 'easy',
          options: {
            A: 'Component Variants',
            B: 'Backoffice Widgets',
            C: 'PIM Exports',
            D: 'Workflow Steps',
            E: 'Promotion Rules',
          },
          answer: {
            correctOptions: ['A'],
            explanations: {
              A: 'Component Variants define alternative component versions and enable runtime personalization in SmartEdit.',
              B: 'Backoffice Widgets provide admin UI functionality, not runtime storefront personalization.',
              C: 'PIM Exports move product data; they do not manage live component personalization.',
              D: 'Workflow Steps coordinate approval processes, unrelated to dynamic personalization logic.',
              E: 'Promotion Rules govern pricing strategies, not direct component rendering variants.',
            },
          },
        },
      ],
    },
    {
      name: 'perfect_double',
      input: { NUM_QUESTIONS: 1, TOPIC: 'SmartEdit' },
      output: [
        {
          id: 1,
          text: 'Which two SmartEdit features together allow content editors to preview component variations and manage personalization during runtime?',
          correctCount: 2,
          certificationTitle: 'SAP Commerce Cloud',
          topic: 'SmartEdit',
          topicSubarea: 'preview and personalization',
          difficulty: 'medium',
          options: {
            A: 'Backoffice Widgets',
            B: 'PIM Exporters',
            C: 'Component Variants',
            D: 'Experience Editor',
            E: 'Promotion Rules',
          },
          answer: {
            correctOptions: ['C', 'D'],
            explanations: {
              A: 'Backoffice Widgets provide admin UI for management tasks but do not enable storefront runtime personalization.',
              B: 'PIM Exporters handle product data export and are unrelated to runtime content variation.',
              C: 'Component Variants define alternative component versions that can be previewed in SmartEdit.',
              D: 'Experience Editor (or similar runtime editor) allows editors to apply and preview personalization rules during runtime.',
              E: 'Promotion Rules manage pricing and promotions, not component personalization or previewing.',
            },
          },
        },
      ],
    },
    {
      name: 'perfect_triple',
      input: { NUM_QUESTIONS: 1, TOPIC: 'Checkout' },
      output: [
        {
          id: 1,
          text: 'During checkout, which three features collectively improve validation, payment handling, and order confirmation flow?',
          correctCount: 3,
          certificationTitle: 'SAP Commerce Cloud',
          topic: 'Checkout',
          topicSubarea: 'validation & payments',
          difficulty: 'hard',
          options: {
            A: 'Catalog Sync',
            B: 'Payment Provider Integration',
            C: 'Checkout Validation Hooks',
            D: 'UI Personalization',
            E: 'Order Confirmation Service',
          },
          answer: {
            correctOptions: ['B', 'C', 'E'],
            explanations: {
              A: 'Catalog Sync keeps product data consistent but does not directly handle checkout validation or payments.',
              B: 'Payment Provider Integration handles transaction processing and is essential for payment handling during checkout.',
              C: 'Checkout Validation Hooks provide server-side validation for input and business rules during the checkout flow.',
              D: 'UI Personalization can improve user experience but does not guarantee payment handling or order confirmation logic.',
              E: 'Order Confirmation Service is responsible for finalizing orders and notifying downstream systems after successful checkout.',
            },
          },
        },
      ],
    },
    
  ],
};